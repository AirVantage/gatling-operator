apiVersion: gatling-operator.tech.zozo.com/v1alpha1
kind: Gatling
metadata:
  name: gatling-sample02
spec:
  generateReport: true                                   # The flag of generating gatling report
  notifyReport: false                                     # The flag of notifying gatling report
  cleanupAfterJobDone: true                               #  The flag of cleaning up gatling jobs resources after the job done
  podSpec:
    serviceAccountName: "gatling-operator-worker"
    gatlingImage: ghcr.io/st-tech/gatling:latest           # Optional. Default: ghcr.io/st-tech/gatling:latest. The image that will be used for Gatling container.
    rcloneImage: rclone/rclone                            # Optional. Default: rclone/rclone:latest. The image that will be used for rclone conatiner.
    resources:                                            # Optional. Resources specifies the resource limits of the container.
      limits:
        cpu: "500m"
        memory: "500Mi"
    affinity:                                             # Optional. Affinity specification
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
            - matchExpressions:
                - key: kubernetes.io/os
                  operator: In
                  values:
                    - linux
  cloudStorageSpec:
    provider: "aws"                                       # Provider specifies the cloud provider that will be used. Supported providers: "aws", "gcp"
    bucket: "gatling-operator-reports"                    # Bucket name in cloud storage service, on which Gatlilng report files are stored
    region: "ap-northeast-1"                              # Optional. Default: "ap-northeast-1" for aws provider. Region name
    #env:                                                 # Optional. Environment variables to be used for connecting to the cloud providers
    #  # For S3 see also the env variables for auth: https://rclone.org/s3/#authentication
    #  - name: AWS_ACCESS_KEY_ID
    #    value: xxxxxxxxxxxxxxx
    #  - name: AWS_SECRET_ACCESS_KEY
    #    value: xxxxxxxxxxxxxxx
  notificationServiceSpec:
    provider: "slack"                                     # Notification provider name. Supported provider: "slack" 
    secretName: "gatling-notification-slack-secrets"      # The name of secret in which all key/value sets needed for the notification are stored
  testScenarioSpec:
    # startTime: 2021-09-10 08:45:31                      # Optional. Start time of running test scenario in UTC. Format: %Y-%m-%d %H:%M:%S
    parallelism: 3                                        # Optional. Default: 1. Number of pods running at any instant
    # simulationsDirectoryPath: "/dir-path-to-simulation" # Optional. Default: /opt/gatling/user-files/simulations
    # resourcesDirectoryPath: "dir-path-to-resources"     # Optional. Default: /opt/gatling/user-files/resources
    # resultsDirectoryPath: "dir-path-to-results"         # Optional. Default: /opt/gatling/results.
    simulationClass: "MyBasicSimulation"                  # Gatling simulation class name
    env:
      - name: ENV
        value: "dev"
      - name: CONCURRENCY
        value: "2"
      - name: DURATION
        value: "10"
      - name: SECRET_KEY
        valueFrom:
          secretKeyRef:
            name: gatling-basic-simulation-secrets
            key: SECRET_KEY
    simulationData:                                      # Optional. Default: empty string map. Simulation Scala data to be created as ConfigMap that is mounted on simulations dir
      MyBasicSimulation.scala: |
        // Sample originally from https://github.com/gatling/gatling/blob/400a125d7995d1b895c4cc4847ff15059d252948/gatling-bundle/src/main/scala/computerdatabase/BasicSimulation.scala
        /*
        * Copyright 2011-2021 GatlingCorp (https://gatling.io)
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        *  http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
        import scala.concurrent.duration._

        import io.gatling.core.Predef._
        import io.gatling.http.Predef._

        class MyBasicSimulation extends Simulation {

          val usersPerSec = sys.env.getOrElse("CONCURRENCY", "1").toInt
          val durationSec = sys.env.getOrElse("DURATION", "10").toInt

          val httpProtocol = http
            // Here is the root for all relative URLs
            .baseUrl("http://computer-database.gatling.io")
            // Here are the common headers
            .acceptHeader("text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8")
            .doNotTrackHeader("1")
            .acceptLanguageHeader("en-US,en;q=0.5")
            .acceptEncodingHeader("gzip, deflate")
            .userAgentHeader("Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:16.0) Gecko/20100101 Firefox/16.0")

          // A scenario is a chain of requests and pauses
          val scn = scenario("Scenario Name")
            .exec(
              http("request_1")
                .get("/")
            )
            // Note that Gatling has recorded real time pauses
            .pause(7)
            .exec(
              http("request_2")
                .get("/computers?f=macbook")
            )
            .pause(2)
            .exec(
              http("request_3")
                .get("/computers/6")
            )
            .pause(3)
            .exec(
              http("request_4")
                // Here's an example of a POST request
                .post("/computers")
                // Note the triple double quotes: used in Scala for protecting a whole chain of characters (no need for backslash)
                .formParam("name", "Beautiful Computer")
                .formParam("introduced", "2012-05-30")
                .formParam("discontinued", "")
                .formParam("company", "37")
            )

          setUp(
            scn.inject(
              constantUsersPerSec(usersPerSec) during(durationSec seconds)
            ).protocols(httpProtocol)
          )
        }
    resourceData:                                       # Optional. Default: empty string map. Resource data used with Simulation scala to be created as ConfigMap that is mounted on resource dir
      search.csv: |
        "Search Keyword"
        "foo"
        "bar"
        "baz"
    gatlingConf:                                        # Optional. Default: empty string map. Gatling Conf data to be created as ConfigMap that is mounted on gatling conf dir
      gatling.conf: |
        #########################
        # Gatling Configuration #
        #########################

        # This file contains all the settings configurable for Gatling with their default values

        gatling {
          core {
            #outputDirectoryBaseName = "" # The prefix for each simulation result folder (then suffixed by the report generation timestamp)
            #runDescription = ""          # The description for this simulation run, displayed in each report
            #encoding = "utf-8"           # Encoding to use throughout Gatling for file and string manipulation
            #simulationClass = ""         # The FQCN of the simulation to run (when used in conjunction with noReports, the simulation for which assertions will be validated)
            #elFileBodiesCacheMaxCapacity = 200      # Cache size for request body EL templates, set to 0 to disable
            #rawFileBodiesCacheMaxCapacity = 200     # Cache size for request body Raw templates, set to 0 to disable
            #rawFileBodiesInMemoryMaxSize = 1000     # Below this limit, raw file bodies will be cached in memory
            #pebbleFileBodiesCacheMaxCapacity = 200  # Cache size for request body Peeble templates, set to 0 to disable
            #feederAdaptiveLoadModeThreshold = 100   # File size threshold (in MB). Below load eagerly in memory, above use batch mode with default buffer size
            #shutdownTimeout = 10000                 # Milliseconds to wait for the actor system to shutdown
            extract {
              regex {
                #cacheMaxCapacity = 200 # Cache size for the compiled regexes, set to 0 to disable caching
              }
              xpath {
                #cacheMaxCapacity = 200 # Cache size for the compiled XPath queries,  set to 0 to disable caching
              }
              jsonPath {
                #cacheMaxCapacity = 200 # Cache size for the compiled jsonPath queries, set to 0 to disable caching
              }
              css {
                #cacheMaxCapacity = 200 # Cache size for the compiled CSS selectors queries,  set to 0 to disable caching
              }
            }
            directory {
              #simulations = ""                     # If set, directory where simulation classes are located
              #resources = ""                       # If set, directory where resources, such as feeder files and request bodies, are located
              #reportsOnly = ""                     # If set, name of report folder to look for in order to generate its report
              #binaries = ""                        # If set, name of the folder where compiles classes are located: Defaults to GATLING_HOME/target.
              #results = results                    # Name of the folder where all reports folder are located
            }
          }
          socket {
            #connectTimeout = 10000                 # Timeout in millis for establishing a TCP socket
            #tcpNoDelay = true
            #soKeepAlive = false                    # if TCP keepalive configured at OS level should be used
            #soReuseAddress = false
          }
          netty {
            #useNativeTransport = true              # if Netty native transport should be used instead of Java NIO
            #allocator = "pooled"                   # switch to unpooled for unpooled ByteBufAllocator
            #maxThreadLocalCharBufferSize = 200000  # Netty's default is 16k
          }
          ssl {
            #useOpenSsl = true                    # if OpenSSL should be used instead of JSSE (only the latter can be debugged with -Djava.net.debug=ssl)
            #useOpenSslFinalizers = false         # if OpenSSL contexts should be freed with Finalizer or if using RefCounted is fine
            #handshakeTimeout = 10000             # TLS handshake timeout in millis
            #useInsecureTrustManager = true       # Use an insecure TrustManager that trusts all server certificates
            #enabledProtocols = []             # Array of enabled protocols for HTTPS, if empty use Netty's defaults
            #enabledCipherSuites = []          # Array of enabled cipher suites for HTTPS, if empty enable all available ciphers
            #sessionCacheSize = 0              # SSLSession cache size, set to 0 to use JDK's default
            #sessionTimeout = 0                # SSLSession timeout in seconds, set to 0 to use JDK's default (24h)
            #enableSni = true                     # When set to true, enable Server Name indication (SNI)
            keyStore {
              #type = ""      # Type of SSLContext's KeyManagers store
              #file = ""      # Location of SSLContext's KeyManagers store
              #password = ""  # Password for SSLContext's KeyManagers store
              #algorithm = "" # Algorithm used SSLContext's KeyManagers store
            }
            trustStore {
              #type = ""      # Type of SSLContext's TrustManagers store
              #file = ""      # Location of SSLContext's TrustManagers store
              #password = ""  # Password for SSLContext's TrustManagers store
              #algorithm = "" # Algorithm used by SSLContext's TrustManagers store
            }
          }
          charting {
            #noReports = false       # When set to true, don't generate HTML reports
            #maxPlotPerSeries = 1000 # Number of points per graph in Gatling reports
            #useGroupDurationMetric = false  # Switch group timings from cumulated response time to group duration.
            indicators {
              #lowerBound = 800      # Lower bound for the requests' response time to track in the reports and the console summary
              #higherBound = 1200    # Higher bound for the requests' response time to track in the reports and the console summary
              #percentile1 = 50      # Value for the 1st percentile to track in the reports, the console summary and Graphite
              #percentile2 = 75      # Value for the 2nd percentile to track in the reports, the console summary and Graphite
              #percentile3 = 95      # Value for the 3rd percentile to track in the reports, the console summary and Graphite
              #percentile4 = 99      # Value for the 4th percentile to track in the reports, the console summary and Graphite
            }
          }
          http {
            #fetchedCssCacheMaxCapacity = 200          # Cache size for CSS parsed content, set to 0 to disable
            #fetchedHtmlCacheMaxCapacity = 200         # Cache size for HTML parsed content, set to 0 to disable
            #perUserCacheMaxCapacity = 200             # Per virtual user cache size, set to 0 to disable
            #warmUpUrl = "https://gatling.io"          # The URL to use to warm-up the HTTP stack (blank means disabled)
            #enableGA = true                           # Very light Google Analytics (Gatling and Java version), please support
            #pooledConnectionIdleTimeout = 60000       # Timeout in millis for a connection to stay idle in the pool
            #requestTimeout = 60000                    # Timeout in millis for performing an HTTP request
            #enableHostnameVerification = false        # When set to true, enable hostname verification: SSLEngine.setHttpsEndpointIdentificationAlgorithm("HTTPS")
            dns {
              #queryTimeout = 5000                     # Timeout in millis of each DNS query in millis
              #maxQueriesPerResolve = 6                # Maximum allowed number of DNS queries for a given name resolution
            }
          }
          jms {
            #replyTimeoutScanPeriod = 1000  # scan period for timedout reply messages
          }
          data {
            #writers = [console, file]      # The list of DataWriters to which Gatling write simulation data (currently supported : console, file, graphite)
            console {
              #light = false                # When set to true, displays a light version without detailed request stats
              #writePeriod = 5              # Write interval, in seconds
            }
            file {
              #bufferSize = 8192            # FileDataWriter's internal data buffer size, in bytes
            }
            leak {
              #noActivityTimeout = 30  # Period, in seconds, for which Gatling may have no activity before considering a leak may be happening
            }
            graphite {
              #light = false              # only send the all* stats
              #host = "localhost"         # The host where the Carbon server is located
              #port = 2003                # The port to which the Carbon server listens to (2003 is default for plaintext, 2004 is default for pickle)
              #protocol = "tcp"           # The protocol used to send data to Carbon (currently supported : "tcp", "udp")
              #rootPathPrefix = "gatling" # The common prefix of all metrics sent to Graphite
              #bufferSize = 8192          # Internal data buffer size, in bytes
              #writePeriod = 1            # Write period, in seconds
            }
          }
        }
